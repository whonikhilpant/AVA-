{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(credentials) {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  async getCurrentUser() {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('token');\n    }\n  },\n  async refreshToken() {\n    const response = await api.post('/auth/refresh');\n    return response.data;\n  },\n  async changePassword(currentPassword, newPassword) {\n    await api.post('/auth/change-password', {\n      currentPassword,\n      newPassword\n    });\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","credentials","post","data","getCurrentUser","get","logout","refreshToken","changePassword","currentPassword","newPassword"],"sources":["C:/Users/nikhi/AVA/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { LoginCredentials, AuthResponse, User } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if available\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    const response = await api.get('/auth/me');\r\n    return response.data;\r\n  },\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      await api.post('/auth/logout');\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n    }\r\n  },\r\n\r\n  async refreshToken(): Promise<AuthResponse> {\r\n    const response = await api.post('/auth/refresh');\r\n    return response.data;\r\n  },\r\n\r\n  async changePassword(currentPassword: string, newPassword: string): Promise<void> {\r\n    await api.post('/auth/change-password', {\r\n      currentPassword,\r\n      newPassword,\r\n    });\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAG;EACzB,MAAMC,KAAKA,CAACC,WAA6B,EAAyB;IAChE,MAAMZ,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;IAC3D,OAAOZ,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED,MAAMC,cAAcA,CAAA,EAAkB;IACpC,MAAMf,QAAQ,GAAG,MAAMZ,GAAG,CAAC4B,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOhB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED,MAAMG,MAAMA,CAAA,EAAkB;IAC5B,IAAI;MACF,MAAM7B,GAAG,CAACyB,IAAI,CAAC,cAAc,CAAC;IAChC,CAAC,SAAS;MACRhB,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAClC;EACF,CAAC;EAED,MAAMc,YAAYA,CAAA,EAA0B;IAC1C,MAAMlB,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,eAAe,CAAC;IAChD,OAAOb,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED,MAAMK,cAAcA,CAACC,eAAuB,EAAEC,WAAmB,EAAiB;IAChF,MAAMjC,GAAG,CAACyB,IAAI,CAAC,uBAAuB,EAAE;MACtCO,eAAe;MACfC;IACF,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}