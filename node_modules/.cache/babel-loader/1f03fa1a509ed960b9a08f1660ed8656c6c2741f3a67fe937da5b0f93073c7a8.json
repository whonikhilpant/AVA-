{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://leadinfo.site/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Automatically attach token (if using auth in future)\n// api.interceptors.request.use((config) => {\n//   const token = localStorage.getItem('token');\n//   if (token) {\n//     config.headers.Authorization = `Bearer ${token}`;\n//   }\n//   return config;\n// });\n\nexport const dashboardService = {\n  async getStats() {\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    const empId = user === null || user === void 0 ? void 0 : user.employeeId;\n    if (!empId) {\n      throw new Error('Missing empId');\n    }\n    try {\n      const response = await axios.get(`http://leadinfo.site/employee/dashboard_stats.php?empId=${empId}`);\n      return response.data.data; // assuming { success: true, data: { ... } }\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      throw new Error('Unable to fetch dashboard stats');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","dashboardService","getStats","user","JSON","parse","localStorage","getItem","empId","employeeId","Error","response","get","data","error","console"],"sources":["C:/Users/Admin/AVA-/src/services/dashboardService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { DashboardStats } from '../types';\r\n\r\nconst API_BASE_URL = 'http://leadinfo.site/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Automatically attach token (if using auth in future)\r\n// api.interceptors.request.use((config) => {\r\n//   const token = localStorage.getItem('token');\r\n//   if (token) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//   }\r\n//   return config;\r\n// });\r\n\r\nexport const dashboardService = {\r\n  async getStats(): Promise<DashboardStats> {\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    const empId = user?.employeeId;\r\n\r\n    if (!empId) {\r\n      throw new Error('Missing empId');\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `http://leadinfo.site/employee/dashboard_stats.php?empId=${empId}`\r\n      );\r\n      return response.data.data; // assuming { success: true, data: { ... } }\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard stats:', error);\r\n      throw new Error('Unable to fetch dashboard stats');\r\n    }\r\n  },\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,0BAA0B;AAE/C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG;EAC9B,MAAMC,QAAQA,CAAA,EAA4B;IACxC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAC7D,MAAMC,KAAK,GAAGL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,UAAU;IAE9B,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;IAClC;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAC9B,2DAA2DJ,KAAK,EAClE,CAAC;MACD,OAAOG,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAM,IAAIJ,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}