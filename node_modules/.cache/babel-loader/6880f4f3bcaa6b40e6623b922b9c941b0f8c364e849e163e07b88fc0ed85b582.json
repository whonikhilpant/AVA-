{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Mock data for demo mode\nconst MOCK_DASHBOARD_STATS = {\n  attendance: {\n    totalDays: 22,\n    presentDays: 20,\n    absentDays: 1,\n    lateDays: 1,\n    attendancePercentage: 90.9\n  },\n  totalLeads: 45,\n  activeLeads: 12,\n  totalEvents: 8,\n  upcomingEvents: 3,\n  emailsSent: 156,\n  emailsRead: 142\n};\nexport const dashboardService = {\n  async getStats() {\n    try {\n      const response = await api.get('/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      // Return mock data if API fails (demo mode)\n      console.log('Using mock dashboard data (demo mode)');\n      return MOCK_DASHBOARD_STATS;\n    }\n  },\n  async getRecentActivity() {\n    try {\n      const response = await api.get('/dashboard/activity');\n      return response.data;\n    } catch (error) {\n      // Return mock activity data\n      return [{\n        id: '1',\n        type: 'email',\n        message: 'Email sent to client',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 hours ago\n      }, {\n        id: '2',\n        type: 'attendance',\n        message: 'Attendance marked',\n        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000) // 4 hours ago\n      }, {\n        id: '3',\n        type: 'lead',\n        message: 'New lead added',\n        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000) // 6 hours ago\n      }];\n    }\n  },\n  async getAttendanceChart() {\n    try {\n      const response = await api.get('/dashboard/attendance-chart');\n      return response.data;\n    } catch (error) {\n      // Return mock chart data\n      return {\n        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n        data: [95, 88, 92, 85, 91]\n      };\n    }\n  },\n  async getLeadStats() {\n    try {\n      const response = await api.get('/dashboard/leads');\n      return response.data;\n    } catch (error) {\n      // Return mock lead stats\n      return {\n        total: 45,\n        new: 12,\n        contacted: 18,\n        qualified: 10,\n        won: 3,\n        lost: 2\n      };\n    }\n  },\n  async getEmailStats() {\n    try {\n      const response = await api.get('/dashboard/emails');\n      return response.data;\n    } catch (error) {\n      // Return mock email stats\n      return {\n        sent: 156,\n        delivered: 152,\n        read: 142,\n        failed: 4\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","MOCK_DASHBOARD_STATS","attendance","totalDays","presentDays","absentDays","lateDays","attendancePercentage","totalLeads","activeLeads","totalEvents","upcomingEvents","emailsSent","emailsRead","dashboardService","getStats","response","get","data","error","console","log","getRecentActivity","id","type","message","timestamp","Date","now","getAttendanceChart","labels","getLeadStats","total","new","contacted","qualified","won","lost","getEmailStats","sent","delivered","read","failed"],"sources":["C:/Users/praka/AVA/src/services/dashboardService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { DashboardStats } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Mock data for demo mode\r\nconst MOCK_DASHBOARD_STATS: DashboardStats = {\r\n  attendance: {\r\n    totalDays: 22,\r\n    presentDays: 20,\r\n    absentDays: 1,\r\n    lateDays: 1,\r\n    attendancePercentage: 90.9,\r\n  },\r\n  totalLeads: 45,\r\n  activeLeads: 12,\r\n  totalEvents: 8,\r\n  upcomingEvents: 3,\r\n  emailsSent: 156,\r\n  emailsRead: 142,\r\n};\r\n\r\nexport const dashboardService = {\r\n  async getStats(): Promise<DashboardStats> {\r\n    try {\r\n      const response = await api.get('/dashboard/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      // Return mock data if API fails (demo mode)\r\n      console.log('Using mock dashboard data (demo mode)');\r\n      return MOCK_DASHBOARD_STATS;\r\n    }\r\n  },\r\n\r\n  async getRecentActivity() {\r\n    try {\r\n      const response = await api.get('/dashboard/activity');\r\n      return response.data;\r\n    } catch (error) {\r\n      // Return mock activity data\r\n      return [\r\n        {\r\n          id: '1',\r\n          type: 'email',\r\n          message: 'Email sent to client',\r\n          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\r\n        },\r\n        {\r\n          id: '2',\r\n          type: 'attendance',\r\n          message: 'Attendance marked',\r\n          timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\r\n        },\r\n        {\r\n          id: '3',\r\n          type: 'lead',\r\n          message: 'New lead added',\r\n          timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago\r\n        },\r\n      ];\r\n    }\r\n  },\r\n\r\n  async getAttendanceChart() {\r\n    try {\r\n      const response = await api.get('/dashboard/attendance-chart');\r\n      return response.data;\r\n    } catch (error) {\r\n      // Return mock chart data\r\n      return {\r\n        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\r\n        data: [95, 88, 92, 85, 91],\r\n      };\r\n    }\r\n  },\r\n\r\n  async getLeadStats() {\r\n    try {\r\n      const response = await api.get('/dashboard/leads');\r\n      return response.data;\r\n    } catch (error) {\r\n      // Return mock lead stats\r\n      return {\r\n        total: 45,\r\n        new: 12,\r\n        contacted: 18,\r\n        qualified: 10,\r\n        won: 3,\r\n        lost: 2,\r\n      };\r\n    }\r\n  },\r\n\r\n  async getEmailStats() {\r\n    try {\r\n      const response = await api.get('/dashboard/emails');\r\n      return response.data;\r\n    } catch (error) {\r\n      // Return mock email stats\r\n      return {\r\n        sent: 156,\r\n        delivered: 152,\r\n        read: 142,\r\n        failed: 4,\r\n      };\r\n    }\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}