{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://leadinfo.site/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Automatically attach token (if using auth in future)\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const dashboardService = {\n  async getStats() {\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    const empId = user === null || user === void 0 ? void 0 : user.employeeId;\n    if (!empId) {\n      throw new Error('Employee ID missing from localStorage.');\n    }\n    try {\n      const response = await api.get(`/dashboard_stats.php?empId=${empId}`);\n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.message || 'Failed to fetch stats');\n      }\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      // Optionally use fallback\n      return {\n        totalLeads: 0,\n        activeEvents: 0,\n        emailsSent: 0\n      };\n    }\n  },\n  // Optional for future if needed\n  async getRecentActivity() {\n    return [{\n      id: '1',\n      type: 'email',\n      message: 'Email sent to client',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000)\n    }, {\n      id: '2',\n      type: 'attendance',\n      message: 'Attendance marked',\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000)\n    }, {\n      id: '3',\n      type: 'lead',\n      message: 'New lead added',\n      timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000)\n    }];\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","dashboardService","getStats","user","JSON","parse","empId","employeeId","Error","response","get","data","success","message","error","console","totalLeads","activeEvents","emailsSent","getRecentActivity","id","type","timestamp","Date","now"],"sources":["C:/Users/Admin/AVA-/src/services/dashboardService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { DashboardStats } from '../types';\r\n\r\nconst API_BASE_URL = 'http://leadinfo.site/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Automatically attach token (if using auth in future)\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const dashboardService = {\r\n  async getStats(): Promise<DashboardStats> {\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    const empId = user?.employeeId;\r\n\r\n    if (!empId) {\r\n      throw new Error('Employee ID missing from localStorage.');\r\n    }\r\n\r\n    try {\r\n      const response = await api.get(`/dashboard_stats.php?empId=${empId}`);\r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Failed to fetch stats');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard stats:', error);\r\n      // Optionally use fallback\r\n      return {\r\n        totalLeads: 0,\r\n        activeEvents: 0,\r\n        emailsSent: 0,\r\n      };\r\n    }\r\n  },\r\n\r\n  // Optional for future if needed\r\n  async getRecentActivity() {\r\n    return [\r\n      {\r\n        id: '1',\r\n        type: 'email',\r\n        message: 'Email sent to client',\r\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n      },\r\n      {\r\n        id: '2',\r\n        type: 'attendance',\r\n        message: 'Attendance marked',\r\n        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\r\n      },\r\n      {\r\n        id: '3',\r\n        type: 'lead',\r\n        message: 'New lead added',\r\n        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),\r\n      },\r\n    ];\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,0BAA0B;AAE/C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,gBAAgB,GAAG;EAC9B,MAAMC,QAAQA,CAAA,EAA4B;IACxC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACP,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAC7D,MAAMO,KAAK,GAAGH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,UAAU;IAE9B,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,wCAAwC,CAAC;IAC3D;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMpB,GAAG,CAACqB,GAAG,CAAC,8BAA8BJ,KAAK,EAAE,CAAC;MACrE,IAAIG,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB,OAAOH,QAAQ,CAACE,IAAI,CAACA,IAAI;MAC3B,CAAC,MAAM;QACL,MAAM,IAAIH,KAAK,CAACC,QAAQ,CAACE,IAAI,CAACE,OAAO,IAAI,uBAAuB,CAAC;MACnE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD;MACA,OAAO;QACLE,UAAU,EAAE,CAAC;QACbC,YAAY,EAAE,CAAC;QACfC,UAAU,EAAE;MACd,CAAC;IACH;EACF,CAAC;EAED;EACA,MAAMC,iBAAiBA,CAAA,EAAG;IACxB,OAAO,CACL;MACEC,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,OAAO;MACbR,OAAO,EAAE,sBAAsB;MAC/BS,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IACrD,CAAC,EACD;MACEJ,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,YAAY;MAClBR,OAAO,EAAE,mBAAmB;MAC5BS,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IACrD,CAAC,EACD;MACEJ,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,MAAM;MACZR,OAAO,EAAE,gBAAgB;MACzBS,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IACrD,CAAC,CACF;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}